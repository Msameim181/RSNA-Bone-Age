diff --git a/Train.py b/Train.py
index 9e87fb5..6d8d294 100644
--- a/Train.py
+++ b/Train.py
@@ -14,6 +14,7 @@ import wandb
 from ResNet.resnet_model import Block, ResNet
 # Custom libs
 from utils.dataloader import RSNATestDataset, RSNATrainDataset
+from Validation import validate
 
 # Pre-initializing the loggers
 progress = Progress(
@@ -125,6 +126,35 @@ def train_net(net, device, train_loader, val_loader,
                 pbar.set_postfix(**{'loss (batch)': loss.item()})
                 
 
+                # Evaluation round
+                division_step = (n_train // (10 * batch_size))
+                if division_step > 0:
+                    if global_step % division_step == 0:
+                        histograms = {}
+                        for tag, value in net.named_parameters():
+                            tag = tag.replace('/', '.')
+                            histograms['Weights/' + tag] = wandb.Histogram(value.data.cpu())
+                            histograms['Gradients/' + tag] = wandb.Histogram(value.grad.data.cpu())
+
+                        val_score, correct = validate(net, val_loader, device)
+                        scheduler.step(val_score)
+
+                        logging.info(f'Validation Dice score: {val_score}, Correct: {correct}')
+                        experiment.log({
+                            'learning rate': optimizer.param_groups[0]['lr'],
+                            'validation Dice': val_score,
+                            'validation Correct': correct,
+                            'images': wandb.Image(images[0].cpu()),
+                            'Age': {
+                                'True': wandb.Image(boneage.float().cpu()),
+                                'Pred': wandb.Image(age_pred.argmax(dim=1, keepdim=True)[0].float().cpu()),
+                                'Pred softmax': wandb.Image(torch.softmax(age_pred, dim=1).argmax(dim=1, keepdim=True)[0].float().cpu()),
+                            },
+                            'step': global_step,
+                            'epoch': epoch,
+                            **histograms
+                        })
+
         if save_checkpoint:
             Path(dir_checkpoint).mkdir(parents = True, exist_ok = True)
             torch.save(net.state_dict(), str(f"{dir_checkpoint}/checkpoint_epoch{epoch + 1}.pth"))    
@@ -155,7 +185,6 @@ def data_organizer(train_dataset, test_dataset, batch_size: int, val_percent: fl
 
     return train_loader, val_loader, test_loader
 
-
 def ResNet50(img_channel = 3, num_classes = 1000):
     return ResNet(Block, [3, 4, 6, 3], img_channel, num_classes)
 
diff --git a/utils/__pycache__/dataloader.cpython-39.pyc b/utils/__pycache__/dataloader.cpython-39.pyc
index f582127..ff980c5 100644
Binary files a/utils/__pycache__/dataloader.cpython-39.pyc and b/utils/__pycache__/dataloader.cpython-39.pyc differ
